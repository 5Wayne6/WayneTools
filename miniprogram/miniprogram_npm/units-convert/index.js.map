{"version":3,"sources":["index.js","definitions/length.js","definitions/area.js","definitions/mass.js","definitions/volume.js","definitions/each.js","definitions/temperature.js","definitions/time.js","definitions/digital.js","definitions/partsPer.js","definitions/speed.js","definitions/pace.js","definitions/pressure.js","definitions/current.js","definitions/voltage.js","definitions/power.js","definitions/reactivePower.js","definitions/apparentPower.js","definitions/energy.js","definitions/reactiveEnergy.js","definitions/volumeFlowRate.js","definitions/illuminance.js","definitions/frequency.js","definitions/angle.js","definitions/charge.js","definitions/force.js","definitions/massFlowRate.js","definitions/pieces.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,AENA,AHSA;AELA,ADGA,AENA,AHSA;AELA,ADGA,AENA,AHSA;AELA,ADGA,AENA,ACHA,AJYA;AELA,ADGA,AENA,ACHA,AJYA;AELA,ADGA,AENA,ACHA,AJYA;AELA,AGTA,AJYA,AENA,ACHA,AJYA;AELA,AGTA,AJYA,AENA,ACHA,AJYA;AELA,AGTA,AJYA,AENA,ACHA,AJYA;AELA,AGTA,AJYA,AENA,AGTA,AFMA,AJYA;AELA,AGTA,AJYA,AENA,AGTA,AFMA,AJYA;AELA,AGTA,AJYA,AENA,AGTA,AFMA,AJYA;AELA,AGTA,AJYA,AENA,AGTA,ACHA,AHSA,AJYA;AELA,AGTA,AJYA,AENA,AGTA,ACHA,AHSA,AJYA;AELA,AGTA,AJYA,AENA,AGTA,ACHA,AHSA,AJYA;AELA,AMlBA,AHSA,AJYA,AENA,AGTA,ACHA,AHSA,AJYA;AELA,AMlBA,AHSA,AJYA,AENA,AGTA,ACHA,AHSA,AJYA;AELA,AMlBA,AHSA,AJYA,AENA,AGTA,ACHA,AHSA,AJYA;AELA,AMlBA,AHSA,AJYA,AENA,AMlBA,AHSA,ACHA,AHSA,AJYA;AELA,AMlBA,AHSA,AJYA,AENA,AMlBA,AHSA,ACHA,AHSA,AJYA;AELA,AMlBA,AHSA,AJYA,AENA,AMlBA,AHSA,ACHA,AHSA,AJYA;AELA,AMlBA,AHSA,AJYA,AENA,AMlBA,ACHA,AJYA,ACHA,AHSA,AJYA;AELA,AMlBA,AHSA,AJYA,AENA,AMlBA,ACHA,AJYA,ACHA,AHSA,AJYA;AELA,AMlBA,AHSA,AJYA,AENA,AMlBA,ACHA,AJYA,ACHA,AHSA,AJYA;AELA,AMlBA,AHSA,AJYA,AENA,AQxBA,AFMA,ACHA,AJYA,ACHA,AHSA,AJYA;AELA,AMlBA,AHSA,AJYA,AENA,AQxBA,AFMA,ACHA,AJYA,ACHA,AHSA,AJYA;AELA,AMlBA,AHSA,AJYA,AENA,AQxBA,AFMA,ACHA,AJYA,ACHA,AHSA,AJYA;AELA,AMlBA,AHSA,AJYA,AENA,AQxBA,AFMA,AGTA,AFMA,AJYA,ACHA,AHSA,AJYA;AELA,AMlBA,AHSA,AJYA,AENA,AQxBA,AFMA,AGTA,AFMA,AJYA,ACHA,AHSA,AJYA;AELA,AMlBA,AHSA,AJYA,AENA,AQxBA,AFMA,AGTA,AFMA,AJYA,ACHA,AHSA,AJYA;AELA,AWjCA,ALeA,AHSA,AJYA,AENA,AQxBA,AFMA,AGTA,AFMA,AJYA,ACHA,AHSA,AJYA;AELA,AWjCA,ALeA,AHSA,AJYA,AENA,AQxBA,AFMA,AGTA,AFMA,AJYA,ACHA,AHSA,AJYA;AELA,AWjCA,ALeA,AHSA,AJYA,AENA,AQxBA,AFMA,AGTA,AFMA,AJYA,ACHA,AHSA,AJYA;AELA,AWjCA,ALeA,AHSA,AJYA,AENA,AQxBA,AFMA,AGTA,AFMA,AJYA,ACHA,AOrBA,AV8BA,AJYA;AELA,AWjCA,ALeA,AHSA,AJYA,AENA,AQxBA,AFMA,AGTA,AFMA,AJYA,ACHA,AOrBA,AV8BA,AJYA;AELA,AWjCA,ALeA,AHSA,AJYA,AENA,AQxBA,AFMA,AGTA,AFMA,AJYA,ACHA,AOrBA,AV8BA,AJYA;AELA,AWjCA,ALeA,APqBA,AENA,AQxBA,AFMA,AMlBA,AHSA,AFMA,AJYA,ACHA,AOrBA,AV8BA,AJYA;AELA,AWjCA,ALeA,APqBA,AENA,AQxBA,AFMA,AMlBA,AHSA,AFMA,AJYA,ACHA,AOrBA,AV8BA,AJYA;AELA,AWjCA,ALeA,APqBA,AENA,AQxBA,AFMA,AMlBA,AHSA,AFMA,AJYA,ACHA,AOrBA,AV8BA,AJYA;AELA,AWjCA,ALeA,APqBA,AENA,AQxBA,AFMA,AMlBA,AHSA,AIZA,ANkBA,AJYA,ACHA,AOrBA,AV8BA,AJYA;AELA,AWjCA,ALeA,APqBA,AENA,AQxBA,AFMA,AMlBA,AHSA,AIZA,ANkBA,AJYA,ACHA,AOrBA,AV8BA,AJYA;AELA,AWjCA,ALeA,APqBA,AENA,AQxBA,AFMA,AMlBA,AHSA,AIZA,ANkBA,AJYA,ACHA,AOrBA,AV8BA,AJYA;AiBlDA,Af6CA,AWjCA,ALeA,APqBA,AENA,AQxBA,AFMA,AMlBA,AHSA,AIZA,ANkBA,AJYA,ACHA,AOrBA,AV8BA,AJYA;AiBlDA,Af6CA,AWjCA,ALeA,APqBA,AENA,AQxBA,AFMA,AMlBA,AHSA,AIZA,ANkBA,AJYA,ACHA,AOrBA,AV8BA,AJYA;AiBlDA,Af6CA,AWjCA,ALeA,APqBA,AENA,AQxBA,AFMA,AMlBA,AHSA,AIZA,ANkBA,AJYA,ACHA,AOrBA,AV8BA,AJYA;AiBlDA,Af6CA,AWjCA,ALeA,AU9BA,AjBmDA,AENA,AQxBA,AFMA,AMlBA,AHSA,AIZA,ANkBA,AJYA,ACHA,AOrBA,AV8BA,AJYA;AiBlDA,Af6CA,AWjCA,ALeA,AU9BA,AjBmDA,AENA,AQxBA,AFMA,AMlBA,AHSA,AIZA,ANkBA,AJYA,ACHA,AOrBA,AV8BA,AJYA;AiBlDA,Af6CA,AWjCA,ALeA,AU9BA,AjBmDA,AENA,AQxBA,AFMA,AMlBA,AHSA,AIZA,ANkBA,AJYA,ACHA,AOrBA,AV8BA,AJYA;AiBlDA,Af6CA,AWjCA,ALeA,AU9BA,AjBmDA,AENA,AQxBA,AFMA,AMlBA,AHSA,AOrBA,AHSA,ANkBA,AJYA,ACHA,AOrBA,AV8BA,AJYA;AiBlDA,Af6CA,AWjCA,ALeA,AU9BA,AjBmDA,AENA,AQxBA,AFMA,AMlBA,AHSA,AOrBA,AHSA,ANkBA,AJYA,ACHA,AOrBA,AV8BA,AJYA;AiBlDA,Af6CA,AWjCA,ALeA,AU9BA,AjBmDA,AENA,AQxBA,AFMA,AMlBA,AHSA,AOrBA,AHSA,ANkBA,AJYA,ACHA,AOrBA,AV8BA,AJYA;AiBlDA,Af6CA,AWjCA,ALeA,AU9BA,AjBmDA,AENA,AQxBA,AFMA,AMlBA,AHSA,AOrBA,AHSA,ANkBA,AJYA,ACHA,AOrBA,AV8BA,AgBhDA,ApB4DA;AiBlDA,Af6CA,AWjCA,ALeA,AU9BA,AjBmDA,AENA,AQxBA,AFMA,AMlBA,AHSA,AOrBA,AHSA,ANkBA,AJYA,ACHA,AOrBA,AV8BA,AgBhDA,ApB4DA;AiBlDA,Af6CA,AWjCA,ALeA,AU9BA,AjBmDA,AENA,AQxBA,AFMA,AMlBA,AHSA,AOrBA,AHSA,ANkBA,AJYA,ACHA,AOrBA,AV8BA,AgBhDA,ApB4DA;AiBlDA,Af6CA,AWjCA,ALeA,AU9BA,AGTA,ApB4DA,AENA,AQxBA,AFMA,AMlBA,AHSA,AOrBA,AHSA,ANkBA,AJYA,ACHA,AOrBA,AV8BA,AgBhDA,ApB4DA;AiBlDA,Af6CA,AWjCA,ALeA,AU9BA,AGTA,ApB4DA,AENA,AQxBA,AFMA,AMlBA,AHSA,AOrBA,AHSA,ANkBA,AJYA,ACHA,AOrBA,AV8BA,AgBhDA,ApB4DA;AiBlDA,Af6CA,AWjCA,ALeA,AU9BA,AGTA,ApB4DA,AENA,AQxBA,AFMA,AMlBA,AHSA,AOrBA,AHSA,ANkBA,AJYA,ACHA,AOrBA,AV8BA,AgBhDA,ApB4DA;AiBlDA,Af6CA,AWjCA,ALeA,AU9BA,AIZA,ADGA,ApB4DA,AENA,AQxBA,AFMA,AMlBA,AHSA,AOrBA,AHSA,ANkBA,AJYA,ACHA,AOrBA,AV8BA,AgBhDA,ApB4DA;AiBlDA,Af6CA,AWjCA,ALeA,AU9BA,AIZA,ADGA,ApB4DA,AENA,AQxBA,AFMA,AMlBA,AHSA,AOrBA,AHSA,ANkBA,AJYA,ACHA,AOrBA,AV8BA,AgBhDA,ApB4DA;AiBlDA,Af6CA,AWjCA,ALeA,AU9BA,AIZA,ADGA,ApB4DA,AENA,AQxBA,AFMA,AMlBA,AHSA,AOrBA,AHSA,ANkBA,AJYA,ACHA,AOrBA,AV8BA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AWjCA,ALeA,AU9BA,AIZA,ADGA,ApB4DA,AENA,AQxBA,AFMA,AMlBA,AHSA,AOrBA,AHSA,ANkBA,AJYA,ACHA,AOrBA,AV8BA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AWjCA,ALeA,AU9BA,AIZA,ADGA,ApB4DA,AENA,AQxBA,AFMA,AMlBA,AHSA,AOrBA,AHSA,ANkBA,AJYA,ACHA,AOrBA,AV8BA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AWjCA,ALeA,AU9BA,AIZA,ADGA,ApB4DA,AENA,AQxBA,AIZA,AHSA,AOrBA,AHSA,ANkBA,AJYA,ACHA,AOrBA,AV8BA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AsBlEA,AXiCA,ALeA,AU9BA,AIZA,ADGA,ApB4DA,AENA,AQxBA,AIZA,AHSA,AOrBA,AHSA,ANkBA,AJYA,ACHA,AOrBA,AV8BA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AsBlEA,AXiCA,ALeA,AU9BA,AIZA,ADGA,ApB4DA,AENA,AQxBA,AIZA,AHSA,AOrBA,AHSA,ANkBA,AJYA,ACHA,AOrBA,AV8BA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AsBlEA,AXiCA,ALeA,AU9BA,AIZA,ADGA,ApB4DA,AENA,AQxBA,AIZA,AHSA,AOrBA,AHSA,ANkBA,AJYA,ACHA,AOrBA,AV8BA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ADGA,ApB4DA,AENA,AQxBA,AIZA,AHSA,AOrBA,AHSA,ANkBA,AJYA,ACHA,AOrBA,AV8BA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ADGA,ApB4DA,AENA,AQxBA,AIZA,AHSA,AOrBA,AHSA,ANkBA,AHSA,AOrBA,AV8BA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ADGA,ApB4DA,AENA,AQxBA,AIZA,AHSA,AOrBA,AHSA,ANkBA,AHSA,AOrBA,AV8BA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ADGA,ApB4DA,AENA,AuBrEA,Af6CA,AIZA,AHSA,AOrBA,AHSA,ANkBA,AHSA,AHSA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ADGA,ApB4DA,AENA,AuBrEA,Af6CA,AIZA,AHSA,AOrBA,AHSA,ANkBA,AHSA,AHSA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ADGA,ApB4DA,AENA,AuBrEA,Af6CA,AIZA,AHSA,AOrBA,AHSA,ANkBA,AHSA,AHSA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ADGA,ApB4DA,AENA,AuBrEA,Af6CA,AgBhDA,AZoCA,AHSA,AOrBA,AHSA,ANkBA,AHSA,AHSA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ADGA,ApB4DA,AENA,AuBrEA,Af6CA,AgBhDA,AZoCA,AHSA,AOrBA,AHSA,ANkBA,AHSA,AHSA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ADGA,ApB4DA,AENA,AuBrEA,Af6CA,AgBhDA,AZoCA,AHSA,AOrBA,AHSA,ANkBA,AHSA,AHSA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ADGA,ApB4DA,AENA,AuBrEA,ACHA,AZoCA,AHSA,AOrBA,AHSA,ANkBA,AHSA,AHSA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ADGA,ApB4DA,AENA,AuBrEA,ACHA,AZoCA,AHSA,AOrBA,AHSA,ANkBA,AHSA,AHSA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ADGA,ApB4DA,AENA,AuBrEA,ACHA,AZoCA,AHSA,AOrBA,AHSA,ANkBA,AHSA,AHSA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ADGA,ApB4DA,AENA,AuBrEA,ACHA,AZoCA,AHSA,AOrBA,AHSA,ANkBA,AHSA,AHSA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ADGA,ApB4DA,AyB3EA,ACHA,AZoCA,AHSA,AOrBA,AHSA,ANkBA,AHSA,AHSA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ADGA,ApB4DA,AyB3EA,ACHA,AZoCA,AHSA,AOrBA,AHSA,ANkBA,AHSA,AHSA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ADGA,ApB4DA,AyB3EA,ACHA,AZoCA,AHSA,AOrBA,AHSA,ANkBA,AHSA,AHSA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ADGA,ApB4DA,AyB3EA,ACHA,AZoCA,AHSA,AOrBA,AHSA,ANkBA,AHSA,AHSA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ADGA,ApB4DA,AyB3EA,ACHA,AZoCA,AHSA,AOrBA,AHSA,ANkBA,AHSA,AHSA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ADGA,ApB4DA,AyB3EA,ACHA,AZoCA,AHSA,AOrBA,AHSA,ANkBA,AHSA,AHSA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ADGA,ApB4DA,AyB3EA,ACHA,AZoCA,AHSA,AOrBA,AHSA,ANkBA,AHSA,AHSA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ADGA,ApB4DA,AyB3EA,ACHA,AZoCA,AHSA,AOrBA,AHSA,ANkBA,AHSA,AHSA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ADGA,ApB4DA,AyB3EA,ACHA,AZoCA,AHSA,AOrBA,AHSA,ANkBA,AHSA,AHSA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ADGA,ApB4DA,AyB3EA,ACHA,AZoCA,AHSA,AOrBA,AHSA,ANkBA,AHSA,AHSA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ADGA,ApB4DA,AyB3EA,ACHA,AZoCA,AHSA,AOrBA,AT2BA,AHSA,AHSA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ADGA,ApB4DA,AyB3EA,ACHA,AZoCA,AHSA,AOrBA,AT2BA,AHSA,AHSA,AgBhDA,ApB4DA;AuBpEA,ANkBA,Af6CA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ArB+DA,AyB3EA,ACHA,AZoCA,AHSA,AOrBA,AT2BA,AHSA,AHSA,AgBhDA,ApB4DA;AuBpEA,ArB+DA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ArB+DA,AyB3EA,ACHA,AZoCA,AHSA,AOrBA,AT2BA,AHSA,AHSA,AgBhDA,ApB4DA;AuBpEA,ArB+DA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ArB+DA,AyB3EA,ACHA,AZoCA,AHSA,AOrBA,AT2BA,AHSA,AHSA,AgBhDA,ApB4DA;AuBpEA,ArB+DA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ArB+DA,AyB3EA,ACHA,AZoCA,AHSA,AOrBA,AT2BA,AHSA,AHSA,AgBhDA,ApB4DA;AuBpEA,ArB+DA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ArB+DA,AyB3EA,ACHA,AZoCA,AHSA,AOrBA,AT2BA,AHSA,AHSA,AgBhDA,ApB4DA;AuBpEA,ArB+DA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ArB+DA,AyB3EA,ACHA,AZoCA,AHSA,AOrBA,AT2BA,AHSA,AHSA,AgBhDA,ApB4DA;AuBpEA,ArB+DA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ArB+DA,AyB3EA,ACHA,AZoCA,AHSA,AOrBA,AT2BA,AHSA,AHSA,AgBhDA,ApB4DA;AuBpEA,ArB+DA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ArB+DA,AyB3EA,ACHA,AZoCA,AHSA,AFMA,ANkBA,AgBhDA,ApB4DA;AuBpEA,ArB+DA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ArB+DA,AyB3EA,ACHA,AZoCA,AHSA,AFMA,ANkBA,AgBhDA,ApB4DA;AuBpEA,ArB+DA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ArB+DA,AyB3EA,ACHA,AZoCA,AHSA,ARwBA,AgBhDA,ApB4DA;AuBpEA,ArB+DA,AsBlEA,AhBgDA,AU9BA,AOrBA,AHSA,ArB+DA,AyB3EA,ACHA,AZoCA,AHSA,ARwBA,AgBhDA,ApB4DA;AuBpEA,ArB+DA,AsBlEA,AhBgDA,AU9BA,AIZA,ArB+DA,AyB3EA,ACHA,AZoCA,AHSA,ARwBA,AgBhDA,ApB4DA;AuBpEA,ArB+DA,AsBlEA,AhBgDA,AU9BA,AIZA,ArB+DA,AyB3EA,ACHA,AZoCA,AHSA,ARwBA,AgBhDA,ApB4DA;AuBpEA,ACHA,AhBgDA,AU9BA,AIZA,ArB+DA,AyB3EA,ACHA,AZoCA,AHSA,ARwBA,AgBhDA,ApB4DA;AuBpEA,ACHA,AhBgDA,AU9BA,AIZA,ArB+DA,AyB3EA,ACHA,AZoCA,AHSA,ARwBA,AgBhDA,ApB4DA;AuBpEA,ACHA,AhBgDA,AU9BA,AIZA,ArB+DA,AyB3EA,ACHA,AZoCA,AHSA,ARwBA,AgBhDA,ApB4DA;AuBpEA,ACHA,AhBgDA,AU9BA,AIZA,ArB+DA,AyB3EA,ACHA,AZoCA,AHSA,ARwBA,AgBhDA,ApB4DA;AuBpEA,ACHA,ANkBA,AIZA,ArB+DA,AyB3EA,ACHA,AZoCA,AHSA,ARwBA,AgBhDA,ApB4DA;AuBpEA,ACHA,ANkBA,AIZA,ArB+DA,AyB3EA,ACHA,AZoCA,AHSA,ARwBA,AgBhDA,ApB4DA;AwBvEA,ANkBA,AIZA,ArB+DA,AyB3EA,ACHA,AZoCA,AHSA,ARwBA,AgBhDA,ApB4DA;AwBvEA,ANkBA,AIZA,ArB+DA,AyB3EA,ACHA,AZoCA,AHSA,ARwBA,AgBhDA,ApB4DA;AwBvEA,ANkBA,AIZA,ArB+DA,AyB3EA,ACHA,AZoCA,AHSA,ARwBA,AgBhDA,ApB4DA;AkBrDA,AIZA,ArB+DA,AyB3EA,ACHA,AZoCA,AHSA,ARwBA,AgBhDA,ApB4DA;AkBrDA,AIZA,ArB+DA,AyB3EA,ACHA,AZoCA,AHSA,ARwBA,AgBhDA,ApB4DA;AkBrDA,AIZA,AIZA,ACHA,AZoCA,AHSA,ARwBA,AgBhDA,ApB4DA;AkBrDA,AIZA,AIZA,ACHA,AZoCA,AHSA,ARwBA,AgBhDA,ApB4DA;AkBrDA,AIZA,AIZA,ACHA,AZoCA,AHSA,ARwBA,AgBhDA,ApB4DA;AkBrDA,AIZA,AIZA,ACHA,AZoCA,AHSA,ARwBA,AgBhDA,ApB4DA;AkBrDA,AIZA,AIZA,ACHA,AZoCA,AHSA,ARwBA,AgBhDA,ApB4DA;AkBrDA,AIZA,AIZA,ACHA,AZoCA,AHSA,ARwBA,AgBhDA,ApB4DA;AkBrDA,AIZA,AIZA,ACHA,AZoCA,AHSA,ARwBA,AgBhDA,ApB4DA;AkBrDA,AIZA,AIZA,ACHA,Af6CA,ARwBA,AgBhDA,ApB4DA;AkBrDA,AIZA,AIZA,ACHA,Af6CA,ARwBA,AgBhDA,ApB4DA;AkBrDA,AIZA,AIZA,ACHA,Af6CA,ARwBA,AgBhDA,ApB4DA;AkBrDA,AIZA,AIZA,ACHA,Af6CA,ARwBA,AgBhDA,ApB4DA;AkBrDA,AIZA,AIZA,ACHA,Af6CA,ARwBA,AgBhDA,ApB4DA;AkBrDA,AIZA,AKfA,AvBqEA,AgBhDA,ApB4DA;AkBrDA,AIZA,AKfA,AvBqEA,AgBhDA,ApB4DA;AkBrDA,AIZA,AKfA,AvBqEA,AgBhDA,ApB4DA;AkBrDA,AIZA,AKfA,AvBqEA,AgBhDA,ApB4DA;AkBrDA,AIZA,AKfA,AvBqEA,AgBhDA,ApB4DA;AkBrDA,AIZA,AKfA,AvBqEA,AgBhDA,ApB4DA;AkBrDA,AIZA,AKfA,AvBqEA,AgBhDA,ApB4DA;AkBrDA,AIZA,AKfA,AvBqEA,AgBhDA,ApB4DA;AkBrDA,AS3BA,AvBqEA,AgBhDA,ApB4DA;AkBrDA,AS3BA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;A2BhFA,AvBqEA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AIXA,AgBhDA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA,ApB4DA;AoB3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["var __TEMP__ = require('decimal.js');var Decimal = __REQUIRE_DEFAULT__(__TEMP__);\n\nvar convert,\n  keys = require('lodash.keys'),\n  each = require('lodash.foreach'),\n  measures = {\n    length: require('./definitions/length'),\n    area: require('./definitions/area'),\n    mass: require('./definitions/mass'),\n    volume: require('./definitions/volume'),\n    each: require('./definitions/each'),\n    temperature: require('./definitions/temperature'),\n    time: require('./definitions/time'),\n    digital: require('./definitions/digital'),\n    partsPer: require('./definitions/partsPer'),\n    speed: require('./definitions/speed'),\n    pace: require('./definitions/pace'),\n    pressure: require('./definitions/pressure'),\n    current: require('./definitions/current'),\n    voltage: require('./definitions/voltage'),\n    power: require('./definitions/power'),\n    reactivePower: require('./definitions/reactivePower'),\n    apparentPower: require('./definitions/apparentPower'),\n    energy: require('./definitions/energy'),\n    reactiveEnergy: require('./definitions/reactiveEnergy'),\n    volumeFlowRate: require('./definitions/volumeFlowRate'),\n    illuminance: require('./definitions/illuminance'),\n    frequency: require('./definitions/frequency'),\n    angle: require('./definitions/angle'),\n    charge: require('./definitions/charge'),\n    force: require('./definitions/force'),\n    massFlowRate: require('./definitions/massFlowRate'),\n    pieces: require('./definitions/pieces'),\n  },\n  Converter\n\nConverter = function (numerator, denominator) {\n  if (denominator) this.val = numerator / denominator\n  else this.val = numerator\n}\n\n/**\n * Lets the converter know the source unit abbreviation\n */\nConverter.prototype.from = function (from) {\n  if (this.destination) throw new Error('.from must be called before .to')\n\n  this.origin = this.getUnit(from)\n\n  if (!this.origin) {\n    this.throwUnsupportedUnitError(from)\n  }\n\n  return this\n}\n\n/**\n * Converts the unit and returns the value\n */\nConverter.prototype.to = function (to) {\n  if (!this.origin) throw new Error('.to must be called after .from')\n\n  this.destination = this.getUnit(to)\n\n  var result, transform\n\n  if (!this.destination) {\n    this.throwUnsupportedUnitError(to)\n  }\n\n  // Don't change the value if origin and destination are the same\n  if (this.origin.abbr === this.destination.abbr) {\n    return this.val\n  }\n\n  // You can't go from liquid to mass, for example\n  if (this.destination.measure != this.origin.measure) {\n    throw new Error(\n      'Cannot convert incompatible measures of ' +\n        this.destination.measure +\n        ' and ' +\n        this.origin.measure,\n    )\n  }\n\n  /**\n   * Convert from the source value to its anchor inside the system\n   */\n  // result = this.val * this.origin.unit.to_anchor\n  result = new Decimal(this.val).times(this.origin.unit.to_anchor).toNumber()\n\n  /**\n   * For some changes it's a simple shift (C to K)\n   * So we'll add it when convering into the unit (later)\n   * and subtract it when converting from the unit\n   */\n  if (this.origin.unit.anchor_shift) {\n    // result -= this.origin.unit.anchor_shift\n    result = new Decimal(result).minus(this.origin.unit.anchor_shift).toNumber()\n  }\n\n  /**\n   * Convert from one system to another through the anchor ratio. Some conversions\n   * aren't ratio based or require more than a simple shift. We can provide a custom\n   * transform here to provide the direct result\n   */\n  if (this.origin.system != this.destination.system) {\n    transform =\n      measures[this.origin.measure]._anchors[this.origin.system].transform\n    if (typeof transform === 'function') {\n      result = transform(result)\n    } else {\n      // result *= measures[this.origin.measure]._anchors[this.origin.system].ratio\n      result = new Decimal(result)\n        .times(measures[this.origin.measure]._anchors[this.origin.system].ratio)\n        .toNumber()\n    }\n  }\n\n  /**\n   * This shift has to be done after the system conversion business\n   */\n  if (this.destination.unit.anchor_shift) {\n    // result += this.destination.unit.anchor_shift\n\t\tresult = new Decimal(result).plus(this.destination.unit.anchor_shift).toNumber()\n  }\n\n  /**\n   * Convert to another unit inside the destination system\n   */\n  // return result / this.destination.unit.to_anchor\n\treturn new Decimal(result).div(this.destination.unit.to_anchor).toNumber()\n}\n\n/**\n * Converts the unit to the best available unit.\n */\nConverter.prototype.toBest = function (options) {\n  if (!this.origin) throw new Error('.toBest must be called after .from')\n\n  var options = Object.assign(\n    {\n      exclude: [],\n      cutOffNumber: 1,\n    },\n    options,\n  )\n\n  var best\n  /**\n    Looks through every possibility for the 'best' available unit.\n    i.e. Where the value has the fewest numbers before the decimal point,\n    but is still higher than 1.\n  */\n  each(\n    this.possibilities(),\n    function (possibility) {\n      var unit = this.describe(possibility)\n      var isIncluded = options.exclude.indexOf(possibility) === -1\n\n      if (isIncluded && unit.system === this.origin.system) {\n        var result = this.to(possibility)\n        if (!best || (result >= options.cutOffNumber && result < best.val)) {\n          best = {\n            val: result,\n            unit: possibility,\n            singular: unit.singular,\n            plural: unit.plural,\n          }\n        }\n      }\n    }.bind(this),\n  )\n\n  return best\n}\n\n/**\n * Finds the unit\n */\nConverter.prototype.getUnit = function (abbr) {\n  var found\n\n  each(measures, function (systems, measure) {\n    each(systems, function (units, system) {\n      if (system == '_anchors') return false\n\n      each(units, function (unit, testAbbr) {\n        if (testAbbr == abbr) {\n          found = {\n            abbr: abbr,\n            measure: measure,\n            system: system,\n            unit: unit,\n          }\n          return false\n        }\n      })\n\n      if (found) return false\n    })\n\n    if (found) return false\n  })\n\n  return found\n}\n\nvar describe = function (resp) {\n  return {\n    abbr: resp.abbr,\n    measure: resp.measure,\n    system: resp.system,\n    singular: resp.unit.name.singular,\n    plural: resp.unit.name.plural,\n  }\n}\n\n/**\n * An alias for getUnit\n */\nConverter.prototype.describe = function (abbr) {\n  var resp = Converter.prototype.getUnit(abbr)\n  var desc = null\n\n  try {\n    desc = describe(resp)\n  } catch (err) {\n    this.throwUnsupportedUnitError(abbr)\n  }\n\n  return desc\n}\n\n/**\n * Detailed list of all supported units\n */\nConverter.prototype.list = function (measure) {\n  var list = []\n\n  each(measures, function (systems, testMeasure) {\n    if (measure && measure !== testMeasure) return\n\n    each(systems, function (units, system) {\n      if (system == '_anchors') return false\n\n      each(units, function (unit, abbr) {\n        list = list.concat(\n          describe({\n            abbr: abbr,\n            measure: testMeasure,\n            system: system,\n            unit: unit,\n          }),\n        )\n      })\n    })\n  })\n\n  return list\n}\n\nConverter.prototype.throwUnsupportedUnitError = function (what) {\n  var validUnits = []\n\n  each(measures, function (systems, measure) {\n    each(systems, function (units, system) {\n      if (system == '_anchors') return false\n\n      validUnits = validUnits.concat(keys(units))\n    })\n  })\n\n  throw new Error(\n    'Unsupported unit ' + what + ', use one of: ' + validUnits.join(', '),\n  )\n}\n\n/**\n * Returns the abbreviated measures that the value can be\n * converted to.\n */\nConverter.prototype.possibilities = function (measure) {\n  var possibilities = []\n  if (!this.origin && !measure) {\n    each(keys(measures), function (measure) {\n      each(measures[measure], function (units, system) {\n        if (system == '_anchors') return false\n\n        possibilities = possibilities.concat(keys(units))\n      })\n    })\n  } else {\n    measure = measure || this.origin.measure\n    each(measures[measure], function (units, system) {\n      if (system == '_anchors') return false\n\n      possibilities = possibilities.concat(keys(units))\n    })\n  }\n\n  return possibilities\n}\n\n/**\n * Returns the abbreviated measures that the value can be\n * converted to.\n */\nConverter.prototype.measures = function () {\n  return keys(measures)\n}\n\nconvert = function (value) {\n  return new Converter(value)\n}\n\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = convert;\n","var metric, imperial\n\nmetric = {\n  nm: {\n    name: {\n      singular: 'Nanometer',\n      plural: 'Nanometers',\n    },\n    to_anchor: 1e-9,\n  },\n  μm: {\n    name: {\n      singular: 'Micrometer',\n      plural: 'Micrometers',\n    },\n    to_anchor: 1e-6,\n  },\n  mm: {\n    name: {\n      singular: 'Millimeter',\n      plural: 'Millimeters',\n    },\n    to_anchor: 1e-3,\n  },\n  cm: {\n    name: {\n      singular: 'Centimeter',\n      plural: 'Centimeters',\n    },\n    to_anchor: 1e-2,\n  },\n  m: {\n    name: {\n      singular: 'Meter',\n      plural: 'Meters',\n    },\n    to_anchor: 1,\n  },\n  km: {\n    name: {\n      singular: 'Kilometer',\n      plural: 'Kilometers',\n    },\n    to_anchor: 1e3,\n  },\n}\n\nimperial = {\n  mil: {\n    name: {\n      singular: 'Mil',\n      plural: 'Mils',\n    },\n    to_anchor: 1 / 12000,\n  },\n  in: {\n    name: {\n      singular: 'Inch',\n      plural: 'Inches',\n    },\n    to_anchor: 1 / 12,\n  },\n  yd: {\n    name: {\n      singular: 'Yard',\n      plural: 'Yards',\n    },\n    to_anchor: 3,\n  },\n  'ft-us': {\n    name: {\n      singular: 'US Survey Foot',\n      plural: 'US Survey Feet',\n    },\n    to_anchor: 1.000002,\n  },\n  ft: {\n    name: {\n      singular: 'Foot',\n      plural: 'Feet',\n    },\n    to_anchor: 1,\n  },\n  fathom: {\n    name: {\n      singular: 'Fathom',\n      plural: 'Fathoms',\n    },\n    to_anchor: 6,\n  },\n  mi: {\n    name: {\n      singular: 'Mile',\n      plural: 'Miles',\n    },\n    to_anchor: 5280,\n  },\n  nMi: {\n    name: {\n      singular: 'Nautical Mile',\n      plural: 'Nautical Miles',\n    },\n    to_anchor: 6076.12,\n  },\n}\n\nmodule.exports = {\n  metric: metric,\n  imperial: imperial,\n  _anchors: {\n    metric: {\n      unit: 'm',\n      ratio: 3.28084,\n    },\n    imperial: {\n      unit: 'ft',\n      ratio: 1 / 3.28084,\n    },\n  },\n}\n","var metric, imperial\n\nmetric = {\n  nm2: {\n    name: {\n      singular: 'Square Nanometer',\n      plural: 'Square Nanometers',\n    },\n    to_anchor: 1e-18,\n  },\n  μm2: {\n    name: {\n      singular: 'Square Micrometer',\n      plural: 'Square Micrometers',\n    },\n    to_anchor: 1e-12,\n  },\n  mm2: {\n    name: {\n      singular: 'Square Millimeter',\n      plural: 'Square Millimeters',\n    },\n    to_anchor: 1 / 1000000,\n  },\n  cm2: {\n    name: {\n      singular: 'Square Centimeter',\n      plural: 'Square Centimeters',\n    },\n    to_anchor: 1 / 10000,\n  },\n  m2: {\n    name: {\n      singular: 'Square Meter',\n      plural: 'Square Meters',\n    },\n    to_anchor: 1,\n  },\n  ha: {\n    name: {\n      singular: 'Hectare',\n      plural: 'Hectares',\n    },\n    to_anchor: 10000,\n  },\n  km2: {\n    name: {\n      singular: 'Square Kilometer',\n      plural: 'Square Kilometers',\n    },\n    to_anchor: 1000000,\n  },\n}\n\nimperial = {\n  in2: {\n    name: {\n      singular: 'Square Inch',\n      plural: 'Square Inches',\n    },\n    to_anchor: 1 / 144,\n  },\n  yd2: {\n    name: {\n      singular: 'Square Yard',\n      plural: 'Square Yards',\n    },\n    to_anchor: 9,\n  },\n  ft2: {\n    name: {\n      singular: 'Square Foot',\n      plural: 'Square Feet',\n    },\n    to_anchor: 1,\n  },\n  ac: {\n    name: {\n      singular: 'Acre',\n      plural: 'Acres',\n    },\n    to_anchor: 43560,\n  },\n  mi2: {\n    name: {\n      singular: 'Square Mile',\n      plural: 'Square Miles',\n    },\n    to_anchor: 27878400,\n  },\n}\n\nmodule.exports = {\n  metric: metric,\n  imperial: imperial,\n  _anchors: {\n    metric: {\n      unit: 'm2',\n      ratio: 10.7639,\n    },\n    imperial: {\n      unit: 'ft2',\n      ratio: 1 / 10.7639,\n    },\n  },\n}\n","var metric, imperial\n\nmetric = {\n  mcg: {\n    name: {\n      singular: 'Microgram',\n      plural: 'Micrograms',\n    },\n    to_anchor: 1 / 1000000,\n  },\n  mg: {\n    name: {\n      singular: 'Milligram',\n      plural: 'Milligrams',\n    },\n    to_anchor: 1 / 1000,\n  },\n  g: {\n    name: {\n      singular: 'Gram',\n      plural: 'Grams',\n    },\n    to_anchor: 1,\n  },\n  kg: {\n    name: {\n      singular: 'Kilogram',\n      plural: 'Kilograms',\n    },\n    to_anchor: 1000,\n  },\n  mt: {\n    name: {\n      singular: 'Metric Tonne',\n      plural: 'Metric Tonnes',\n    },\n    to_anchor: 1000000,\n  },\n}\n\nimperial = {\n  oz: {\n    name: {\n      singular: 'Ounce',\n      plural: 'Ounces',\n    },\n    to_anchor: 1 / 16,\n  },\n  lb: {\n    name: {\n      singular: 'Pound',\n      plural: 'Pounds',\n    },\n    to_anchor: 1,\n  },\n  t: {\n    name: {\n      singular: 'Ton',\n      plural: 'Tons',\n    },\n    to_anchor: 2000,\n  },\n}\n\nmodule.exports = {\n  metric: metric,\n  imperial: imperial,\n  _anchors: {\n    metric: {\n      unit: 'g',\n      ratio: 1 / 453.592,\n    },\n    imperial: {\n      unit: 'lb',\n      ratio: 453.592,\n    },\n  },\n}\n","var metric, imperial\n\nmetric = {\n  mm3: {\n    name: {\n      singular: 'Cubic Millimeter',\n      plural: 'Cubic Millimeters',\n    },\n    to_anchor: 1 / 1000000,\n  },\n  cm3: {\n    name: {\n      singular: 'Cubic Centimeter',\n      plural: 'Cubic Centimeters',\n    },\n    to_anchor: 1 / 1000,\n  },\n  ml: {\n    name: {\n      singular: 'Millilitre',\n      plural: 'Millilitres',\n    },\n    to_anchor: 1 / 1000,\n  },\n  cl: {\n    name: {\n      singular: 'Centilitre',\n      plural: 'Centilitres',\n    },\n    to_anchor: 1 / 100,\n  },\n  dl: {\n    name: {\n      singular: 'Decilitre',\n      plural: 'Decilitres',\n    },\n    to_anchor: 1 / 10,\n  },\n  l: {\n    name: {\n      singular: 'Litre',\n      plural: 'Litres',\n    },\n    to_anchor: 1,\n  },\n  kl: {\n    name: {\n      singular: 'Kilolitre',\n      plural: 'Kilolitres',\n    },\n    to_anchor: 1000,\n  },\n  Ml: {\n    name: {\n      singular: 'Megalitre',\n      plural: 'Megalitres',\n    },\n    to_anchor: 1e6,\n  },\n  Gl: {\n    name: {\n      singular: 'Gigalitre',\n      plural: 'Gigalitres',\n    },\n    to_anchor: 1e9,\n  },\n  m3: {\n    name: {\n      singular: 'Cubic meter',\n      plural: 'Cubic meters',\n    },\n    to_anchor: 1000,\n  },\n  km3: {\n    name: {\n      singular: 'Cubic kilometer',\n      plural: 'Cubic kilometers',\n    },\n    to_anchor: 1000000000000,\n  },\n\n  // Swedish units\n  krm: {\n    name: {\n      singular: 'Kryddmått',\n      plural: 'Kryddmått',\n    },\n    to_anchor: 1 / 1000,\n  },\n  tsk: {\n    name: {\n      singular: 'Tesked',\n      plural: 'Teskedar',\n    },\n    to_anchor: 5 / 1000,\n  },\n  msk: {\n    name: {\n      singular: 'Matsked',\n      plural: 'Matskedar',\n    },\n    to_anchor: 15 / 1000,\n  },\n  kkp: {\n    name: {\n      singular: 'Kaffekopp',\n      plural: 'Kaffekoppar',\n    },\n    to_anchor: 150 / 1000,\n  },\n  glas: {\n    name: {\n      singular: 'Glas',\n      plural: 'Glas',\n    },\n    to_anchor: 200 / 1000,\n  },\n  kanna: {\n    name: {\n      singular: 'Kanna',\n      plural: 'Kannor',\n    },\n    to_anchor: 2.617,\n  },\n}\n\nimperial = {\n  tsp: {\n    name: {\n      singular: 'Teaspoon',\n      plural: 'Teaspoons',\n    },\n    to_anchor: 1 / 6,\n  },\n  Tbs: {\n    name: {\n      singular: 'Tablespoon',\n      plural: 'Tablespoons',\n    },\n    to_anchor: 1 / 2,\n  },\n  in3: {\n    name: {\n      singular: 'Cubic inch',\n      plural: 'Cubic inches',\n    },\n    to_anchor: 0.55411,\n  },\n  'fl-oz': {\n    name: {\n      singular: 'Fluid Ounce',\n      plural: 'Fluid Ounces',\n    },\n    to_anchor: 1,\n  },\n  cup: {\n    name: {\n      singular: 'Cup',\n      plural: 'Cups',\n    },\n    to_anchor: 8,\n  },\n  pnt: {\n    name: {\n      singular: 'Pint',\n      plural: 'Pints',\n    },\n    to_anchor: 16,\n  },\n  qt: {\n    name: {\n      singular: 'Quart',\n      plural: 'Quarts',\n    },\n    to_anchor: 32,\n  },\n  gal: {\n    name: {\n      singular: 'Gallon',\n      plural: 'Gallons',\n    },\n    to_anchor: 128,\n  },\n  ft3: {\n    name: {\n      singular: 'Cubic foot',\n      plural: 'Cubic feet',\n    },\n    to_anchor: 957.506,\n  },\n  yd3: {\n    name: {\n      singular: 'Cubic yard',\n      plural: 'Cubic yards',\n    },\n    to_anchor: 25852.7,\n  },\n}\n\nmodule.exports = {\n  metric: metric,\n  imperial: imperial,\n  _anchors: {\n    metric: {\n      unit: 'l',\n      ratio: 33.8140226,\n    },\n    imperial: {\n      unit: 'fl-oz',\n      ratio: 1 / 33.8140226,\n    },\n  },\n}\n","var metric, imperial\n\nmetric = {\n  ea: {\n    name: {\n      singular: 'Each',\n      plural: 'Each',\n    },\n    to_anchor: 1,\n  },\n  dz: {\n    name: {\n      singular: 'Dozen',\n      plural: 'Dozens',\n    },\n    to_anchor: 12,\n  },\n}\n\nmodule.exports = {\n  metric: metric,\n  imperial: {},\n  _anchors: {\n    metric: {\n      unit: 'ea',\n      ratio: 1,\n    },\n  },\n}\n","var metric, imperial\n\nmetric = {\n  C: {\n    name: {\n      singular: 'degree Celsius',\n      plural: 'degrees Celsius',\n    },\n    to_anchor: 1,\n    anchor_shift: 0,\n  },\n  K: {\n    name: {\n      singular: 'Kelvin',\n      plural: 'Kelvins',\n    },\n    to_anchor: 1,\n    anchor_shift: 273.15,\n  },\n}\n\nimperial = {\n  F: {\n    name: {\n      singular: 'degree Fahrenheit',\n      plural: 'degrees Fahrenheit',\n    },\n    to_anchor: 1,\n  },\n  R: {\n    name: {\n      singular: 'degree Rankine',\n      plural: 'degrees Rankine',\n    },\n    to_anchor: 1,\n    anchor_shift: 459.67,\n  },\n}\n\nmodule.exports = {\n  metric: metric,\n  imperial: imperial,\n  _anchors: {\n    metric: {\n      unit: 'C',\n      transform: function (C) {\n        return C / (5 / 9) + 32\n      },\n    },\n    imperial: {\n      unit: 'F',\n      transform: function (F) {\n        return (F - 32) * (5 / 9)\n      },\n    },\n  },\n}\n","var time\nvar daysInYear = 365.25\n\ntime = {\n  ns: {\n    name: {\n      singular: 'Nanosecond',\n      plural: 'Nanoseconds',\n    },\n    to_anchor: 1 / 1000000000,\n  },\n  mu: {\n    name: {\n      singular: 'Microsecond',\n      plural: 'Microseconds',\n    },\n    to_anchor: 1 / 1000000,\n  },\n  ms: {\n    name: {\n      singular: 'Millisecond',\n      plural: 'Milliseconds',\n    },\n    to_anchor: 1 / 1000,\n  },\n  s: {\n    name: {\n      singular: 'Second',\n      plural: 'Seconds',\n    },\n    to_anchor: 1,\n  },\n  min: {\n    name: {\n      singular: 'Minute',\n      plural: 'Minutes',\n    },\n    to_anchor: 60,\n  },\n  h: {\n    name: {\n      singular: 'Hour',\n      plural: 'Hours',\n    },\n    to_anchor: 60 * 60,\n  },\n  d: {\n    name: {\n      singular: 'Day',\n      plural: 'Days',\n    },\n    to_anchor: 60 * 60 * 24,\n  },\n  week: {\n    name: {\n      singular: 'Week',\n      plural: 'Weeks',\n    },\n    to_anchor: 60 * 60 * 24 * 7,\n  },\n  month: {\n    name: {\n      singular: 'Month',\n      plural: 'Months',\n    },\n    to_anchor: (60 * 60 * 24 * daysInYear) / 12,\n  },\n  year: {\n    name: {\n      singular: 'Year',\n      plural: 'Years',\n    },\n    to_anchor: 60 * 60 * 24 * daysInYear,\n  },\n}\n\nmodule.exports = {\n  metric: time,\n  _anchors: {\n    metric: {\n      unit: 's',\n      ratio: 1,\n    },\n  },\n}\n","var bits, bytes\n\nbits = {\n  b: {\n    name: {\n      singular: 'Bit',\n      plural: 'Bits',\n    },\n    to_anchor: 1,\n  },\n  Kb: {\n    name: {\n      singular: 'Kilobit',\n      plural: 'Kilobits',\n    },\n    to_anchor: 1024,\n  },\n  Mb: {\n    name: {\n      singular: 'Megabit',\n      plural: 'Megabits',\n    },\n    to_anchor: 1048576,\n  },\n  Gb: {\n    name: {\n      singular: 'Gigabit',\n      plural: 'Gigabits',\n    },\n    to_anchor: 1073741824,\n  },\n  Tb: {\n    name: {\n      singular: 'Terabit',\n      plural: 'Terabits',\n    },\n    to_anchor: 1099511627776,\n  },\n}\n\nbytes = {\n  B: {\n    name: {\n      singular: 'Byte',\n      plural: 'Bytes',\n    },\n    to_anchor: 1,\n  },\n  KB: {\n    name: {\n      singular: 'Kilobyte',\n      plural: 'Kilobytes',\n    },\n    to_anchor: 1024,\n  },\n  MB: {\n    name: {\n      singular: 'Megabyte',\n      plural: 'Megabytes',\n    },\n    to_anchor: 1048576,\n  },\n  GB: {\n    name: {\n      singular: 'Gigabyte',\n      plural: 'Gigabytes',\n    },\n    to_anchor: 1073741824,\n  },\n  TB: {\n    name: {\n      singular: 'Terabyte',\n      plural: 'Terabytes',\n    },\n    to_anchor: 1099511627776,\n  },\n}\n\nmodule.exports = {\n  bits: bits,\n  bytes: bytes,\n  _anchors: {\n    bits: {\n      unit: 'b',\n      ratio: 1 / 8,\n    },\n    bytes: {\n      unit: 'B',\n      ratio: 8,\n    },\n  },\n}\n","var metric, imperial\n\nmetric = {\n  ppm: {\n    name: {\n      singular: 'Part-per Million',\n      plural: 'Parts-per Million',\n    },\n    to_anchor: 1,\n  },\n  ppb: {\n    name: {\n      singular: 'Part-per Billion',\n      plural: 'Parts-per Billion',\n    },\n    to_anchor: 0.001,\n  },\n  ppt: {\n    name: {\n      singular: 'Part-per Trillion',\n      plural: 'Parts-per Trillion',\n    },\n    to_anchor: 0.000001,\n  },\n  ppq: {\n    name: {\n      singular: 'Part-per Quadrillion',\n      plural: 'Parts-per Quadrillion',\n    },\n    to_anchor: 0.000000001,\n  },\n}\n\nmodule.exports = {\n  metric: metric,\n  imperial: {},\n  _anchors: {\n    metric: {\n      unit: 'ppm',\n      ratio: 0.000001,\n    },\n  },\n}\n","var metric, imperial\n\nmetric = {\n  'm/s': {\n    name: {\n      singular: 'Metre per second',\n      plural: 'Metres per second',\n    },\n    to_anchor: 3.6,\n  },\n  'km/h': {\n    name: {\n      singular: 'Kilometre per hour',\n      plural: 'Kilometres per hour',\n    },\n    to_anchor: 1,\n  },\n  'mm/h': {\n    name: {\n      singular: 'Millimeter per hour',\n      plural: 'Millimeters per hour',\n    },\n    to_anchor: 0.000001,\n  },\n}\n\nimperial = {\n  mph: {\n    name: {\n      singular: 'Mile per hour',\n      plural: 'Miles per hour',\n    },\n    to_anchor: 1,\n  },\n  knot: {\n    name: {\n      singular: 'Knot',\n      plural: 'Knots',\n    },\n    to_anchor: 1.150779,\n  },\n  'ft/s': {\n    name: {\n      singular: 'Foot per second',\n      plural: 'Feet per second',\n    },\n    to_anchor: 0.681818,\n  },\n  'ft/min': {\n    name: {\n      singular: 'Foot per minute',\n      plural: 'Feet per minute',\n    },\n    to_anchor: 0.0113636,\n  },\n  'in/h': {\n    name: {\n      singular: 'Inch per hour',\n      plural: 'Inches per hour',\n    },\n    to_anchor: 0.00001578,\n  },\n}\n\nmodule.exports = {\n  metric: metric,\n  imperial: imperial,\n  _anchors: {\n    metric: {\n      unit: 'km/h',\n      ratio: 1 / 1.609344,\n    },\n    imperial: {\n      unit: 'm/h',\n      ratio: 1.609344,\n    },\n  },\n}\n","var metric, imperial\n\nmetric = {\n  'min/km': {\n    name: {\n      singular: 'Minute per kilometre',\n      plural: 'Minutes per kilometre',\n    },\n    to_anchor: 0.06,\n  },\n  's/m': {\n    name: {\n      singular: 'Second per metre',\n      plural: 'Seconds per metre',\n    },\n    to_anchor: 1,\n  },\n}\n\nimperial = {\n  'min/mi': {\n    name: {\n      singular: 'Minute per mile',\n      plural: 'Minutes per mile',\n    },\n    to_anchor: 0.0113636,\n  },\n  's/ft': {\n    name: {\n      singular: 'Second per foot',\n      plural: 'Seconds per foot',\n    },\n    to_anchor: 1,\n  },\n}\n\nmodule.exports = {\n  metric: metric,\n  imperial: imperial,\n  _anchors: {\n    metric: {\n      unit: 's/m',\n      ratio: 0.3048,\n    },\n    imperial: {\n      unit: 's/ft',\n      ratio: 1 / 0.3048,\n    },\n  },\n}\n","var metric, imperial\n\nmetric = {\n  Pa: {\n    name: {\n      singular: 'pascal',\n      plural: 'pascals',\n    },\n    to_anchor: 1 / 1000,\n  },\n  kPa: {\n    name: {\n      singular: 'kilopascal',\n      plural: 'kilopascals',\n    },\n    to_anchor: 1,\n  },\n  MPa: {\n    name: {\n      singular: 'megapascal',\n      plural: 'megapascals',\n    },\n    to_anchor: 1000,\n  },\n  hPa: {\n    name: {\n      singular: 'hectopascal',\n      plural: 'hectopascals',\n    },\n    to_anchor: 1 / 10,\n  },\n  bar: {\n    name: {\n      singular: 'bar',\n      plural: 'bar',\n    },\n    to_anchor: 100,\n  },\n  torr: {\n    name: {\n      singular: 'torr',\n      plural: 'torr',\n    },\n    to_anchor: 101325 / 760000,\n  },\n  mH2O: {\n    name: {\n      singular: 'meter of water @ 4°C',\n      plural: 'meters of water @ 4°C',\n    },\n    to_anchor: 9.80665,\n  },\n  mmHg: {\n    name: {\n      singular: 'millimeter of mercury',\n      plural: 'millimeters of mercury',\n    },\n    to_anchor: 0.133322,\n  },\n}\n\nimperial = {\n  psi: {\n    name: {\n      singular: 'pound per square inch',\n      plural: 'pounds per square inch',\n    },\n    to_anchor: 1 / 1000,\n  },\n  ksi: {\n    name: {\n      singular: 'kilopound per square inch',\n      plural: 'kilopound per square inch',\n    },\n    to_anchor: 1,\n  },\n  inHg: {\n    name: {\n      singular: 'Inch of mercury',\n      plural: 'Inches of mercury',\n    },\n    to_anchor: 0.000491154,\n  },\n}\n\nmodule.exports = {\n  metric: metric,\n  imperial: imperial,\n  _anchors: {\n    metric: {\n      unit: 'kPa',\n      ratio: 0.00014503768078,\n    },\n    imperial: {\n      unit: 'psi',\n      ratio: 1 / 0.00014503768078,\n    },\n  },\n}\n","var current\n\ncurrent = {\n  A: {\n    name: {\n      singular: 'Ampere',\n      plural: 'Amperes',\n    },\n    to_anchor: 1,\n  },\n  mA: {\n    name: {\n      singular: 'Milliampere',\n      plural: 'Milliamperes',\n    },\n    to_anchor: 0.001,\n  },\n  kA: {\n    name: {\n      singular: 'Kiloampere',\n      plural: 'Kiloamperes',\n    },\n    to_anchor: 1000,\n  },\n}\n\nmodule.exports = {\n  metric: current,\n  _anchors: {\n    metric: {\n      unit: 'A',\n      ratio: 1,\n    },\n  },\n}\n","var voltage\n\nvoltage = {\n  V: {\n    name: {\n      singular: 'Volt',\n      plural: 'Volts',\n    },\n    to_anchor: 1,\n  },\n  mV: {\n    name: {\n      singular: 'Millivolt',\n      plural: 'Millivolts',\n    },\n    to_anchor: 0.001,\n  },\n  kV: {\n    name: {\n      singular: 'Kilovolt',\n      plural: 'Kilovolts',\n    },\n    to_anchor: 1000,\n  },\n}\n\nmodule.exports = {\n  metric: voltage,\n  _anchors: {\n    metric: {\n      unit: 'V',\n      ratio: 1,\n    },\n  },\n}\n","var metric, imperial\n\nmetric = {\n  W: {\n    name: {\n      singular: 'Watt',\n      plural: 'Watts',\n    },\n    to_anchor: 1,\n  },\n  mW: {\n    name: {\n      singular: 'Milliwatt',\n      plural: 'Milliwatts',\n    },\n    to_anchor: 0.001,\n  },\n  kW: {\n    name: {\n      singular: 'Kilowatt',\n      plural: 'Kilowatts',\n    },\n    to_anchor: 1000,\n  },\n  MW: {\n    name: {\n      singular: 'Megawatt',\n      plural: 'Megawatts',\n    },\n    to_anchor: 1000000,\n  },\n  GW: {\n    name: {\n      singular: 'Gigawatt',\n      plural: 'Gigawatts',\n    },\n    to_anchor: 1000000000,\n  },\n  PS: {\n    name: {\n      singular: 'Horsepower (metric)',\n      plural: 'Horsepower (metric)',\n    },\n    to_anchor: 735.49875,\n  },\n}\n\nimperial = {\n  'Btu/s': {\n    name: {\n      singular: 'British thermal unit per second',\n      plural: 'British thermal units per second',\n    },\n    to_anchor: 778.16937,\n  },\n  'ft-lb/s': {\n    name: {\n      singular: 'Foot-pound per second',\n      plural: 'Foot-pounds per second',\n    },\n    to_anchor: 1,\n  },\n  hp: {\n    name: {\n      singular: 'Horsepower (British)',\n      plural: 'Horsepower (British)',\n    },\n    to_anchor: 550,\n  },\n}\n\nmodule.exports = {\n  metric: metric,\n  imperial: imperial,\n  _anchors: {\n    metric: {\n      unit: 'W',\n      ratio: 0.737562149,\n    },\n    imperial: {\n      unit: 'ft-lb/s',\n      ratio: 1 / 0.737562149,\n    },\n  },\n}\n","var reactivePower\n\nreactivePower = {\n  VAR: {\n    name: {\n      singular: 'Volt-Ampere Reactive',\n      plural: 'Volt-Amperes Reactive',\n    },\n    to_anchor: 1,\n  },\n  mVAR: {\n    name: {\n      singular: 'Millivolt-Ampere Reactive',\n      plural: 'Millivolt-Amperes Reactive',\n    },\n    to_anchor: 0.001,\n  },\n  kVAR: {\n    name: {\n      singular: 'Kilovolt-Ampere Reactive',\n      plural: 'Kilovolt-Amperes Reactive',\n    },\n    to_anchor: 1000,\n  },\n  MVAR: {\n    name: {\n      singular: 'Megavolt-Ampere Reactive',\n      plural: 'Megavolt-Amperes Reactive',\n    },\n    to_anchor: 1000000,\n  },\n  GVAR: {\n    name: {\n      singular: 'Gigavolt-Ampere Reactive',\n      plural: 'Gigavolt-Amperes Reactive',\n    },\n    to_anchor: 1000000000,\n  },\n}\n\nmodule.exports = {\n  metric: reactivePower,\n  _anchors: {\n    metric: {\n      unit: 'VAR',\n      ratio: 1,\n    },\n  },\n}\n","var apparentPower\n\napparentPower = {\n  VA: {\n    name: {\n      singular: 'Volt-Ampere',\n      plural: 'Volt-Amperes',\n    },\n    to_anchor: 1,\n  },\n  mVA: {\n    name: {\n      singular: 'Millivolt-Ampere',\n      plural: 'Millivolt-Amperes',\n    },\n    to_anchor: 0.001,\n  },\n  kVA: {\n    name: {\n      singular: 'Kilovolt-Ampere',\n      plural: 'Kilovolt-Amperes',\n    },\n    to_anchor: 1000,\n  },\n  MVA: {\n    name: {\n      singular: 'Megavolt-Ampere',\n      plural: 'Megavolt-Amperes',\n    },\n    to_anchor: 1000000,\n  },\n  GVA: {\n    name: {\n      singular: 'Gigavolt-Ampere',\n      plural: 'Gigavolt-Amperes',\n    },\n    to_anchor: 1000000000,\n  },\n}\n\nmodule.exports = {\n  metric: apparentPower,\n  _anchors: {\n    metric: {\n      unit: 'VA',\n      ratio: 1,\n    },\n  },\n}\n","var energy\n\nenergy = {\n  Ws: {\n    name: {\n      singular: 'Watt-second',\n      plural: 'Watt-seconds',\n    },\n    to_anchor: 1,\n  },\n  Wm: {\n    name: {\n      singular: 'Watt-minute',\n      plural: 'Watt-minutes',\n    },\n    to_anchor: 60,\n  },\n  Wh: {\n    name: {\n      singular: 'Watt-hour',\n      plural: 'Watt-hours',\n    },\n    to_anchor: 3600,\n  },\n  mWh: {\n    name: {\n      singular: 'Milliwatt-hour',\n      plural: 'Milliwatt-hours',\n    },\n    to_anchor: 3.6,\n  },\n  kWh: {\n    name: {\n      singular: 'Kilowatt-hour',\n      plural: 'Kilowatt-hours',\n    },\n    to_anchor: 3600000,\n  },\n  MWh: {\n    name: {\n      singular: 'Megawatt-hour',\n      plural: 'Megawatt-hours',\n    },\n    to_anchor: 3600000000,\n  },\n  GWh: {\n    name: {\n      singular: 'Gigawatt-hour',\n      plural: 'Gigawatt-hours',\n    },\n    to_anchor: 3600000000000,\n  },\n  J: {\n    name: {\n      singular: 'Joule',\n      plural: 'Joules',\n    },\n    to_anchor: 1,\n  },\n  kJ: {\n    name: {\n      singular: 'Kilojoule',\n      plural: 'Kilojoules',\n    },\n    to_anchor: 1000,\n  },\n  MJ: {\n    name: {\n      singular: 'Megajoule',\n      plural: 'Megajoules',\n    },\n    to_anchor: 1e6,\n  },\n  GJ: {\n    name: {\n      singular: 'Gigajoule',\n      plural: 'Gigajoules',\n    },\n    to_anchor: 1e9,\n  },\n}\n\nmodule.exports = {\n  metric: energy,\n  _anchors: {\n    metric: {\n      unit: 'J',\n      ratio: 1,\n    },\n  },\n}\n","var reactiveEnergy\n\nreactiveEnergy = {\n  VARh: {\n    name: {\n      singular: 'Volt-Ampere Reactive Hour',\n      plural: 'Volt-Amperes Reactive Hour',\n    },\n    to_anchor: 1,\n  },\n  mVARh: {\n    name: {\n      singular: 'Millivolt-Ampere Reactive Hour',\n      plural: 'Millivolt-Amperes Reactive Hour',\n    },\n    to_anchor: 0.001,\n  },\n  kVARh: {\n    name: {\n      singular: 'Kilovolt-Ampere Reactive Hour',\n      plural: 'Kilovolt-Amperes Reactive Hour',\n    },\n    to_anchor: 1000,\n  },\n  MVARh: {\n    name: {\n      singular: 'Megavolt-Ampere Reactive Hour',\n      plural: 'Megavolt-Amperes Reactive Hour',\n    },\n    to_anchor: 1000000,\n  },\n  GVARh: {\n    name: {\n      singular: 'Gigavolt-Ampere Reactive Hour',\n      plural: 'Gigavolt-Amperes Reactive Hour',\n    },\n    to_anchor: 1000000000,\n  },\n}\n\nmodule.exports = {\n  metric: reactiveEnergy,\n  _anchors: {\n    metric: {\n      unit: 'VARh',\n      ratio: 1,\n    },\n  },\n}\n","var metric, imperial\n\nmetric = {\n  'mm3/s': {\n    name: {\n      singular: 'Cubic Millimeter per second',\n      plural: 'Cubic Millimeters per second',\n    },\n    to_anchor: 1 / 1000000,\n  },\n  'cm3/s': {\n    name: {\n      singular: 'Cubic Centimeter per second',\n      plural: 'Cubic Centimeters per second',\n    },\n    to_anchor: 1 / 1000,\n  },\n  'ml/s': {\n    name: {\n      singular: 'Millilitre per second',\n      plural: 'Millilitres per second',\n    },\n    to_anchor: 1 / 1000,\n  },\n  'cl/s': {\n    name: {\n      singular: 'Centilitre per second',\n      plural: 'Centilitres per second',\n    },\n    to_anchor: 1 / 100,\n  },\n  'dl/s': {\n    name: {\n      singular: 'Decilitre per second',\n      plural: 'Decilitres per second',\n    },\n    to_anchor: 1 / 10,\n  },\n  'l/s': {\n    name: {\n      singular: 'Litre per second',\n      plural: 'Litres per second',\n    },\n    to_anchor: 1,\n  },\n  'l/min': {\n    name: {\n      singular: 'Litre per minute',\n      plural: 'Litres per minute',\n    },\n    to_anchor: 1 / 60,\n  },\n  'l/h': {\n    name: {\n      singular: 'Litre per hour',\n      plural: 'Litres per hour',\n    },\n    to_anchor: 1 / 3600,\n  },\n  'kl/s': {\n    name: {\n      singular: 'Kilolitre per second',\n      plural: 'Kilolitres per second',\n    },\n    to_anchor: 1000,\n  },\n  'kl/min': {\n    name: {\n      singular: 'Kilolitre per minute',\n      plural: 'Kilolitres per minute',\n    },\n    to_anchor: 50 / 3,\n  },\n  'kl/h': {\n    name: {\n      singular: 'Kilolitre per hour',\n      plural: 'Kilolitres per hour',\n    },\n    to_anchor: 5 / 18,\n  },\n  'm3/s': {\n    name: {\n      singular: 'Cubic meter per second',\n      plural: 'Cubic meters per second',\n    },\n    to_anchor: 1000,\n  },\n  'm3/min': {\n    name: {\n      singular: 'Cubic meter per minute',\n      plural: 'Cubic meters per minute',\n    },\n    to_anchor: 50 / 3,\n  },\n  'm3/h': {\n    name: {\n      singular: 'Cubic meter per hour',\n      plural: 'Cubic meters per hour',\n    },\n    to_anchor: 5 / 18,\n  },\n  'km3/s': {\n    name: {\n      singular: 'Cubic kilometer per second',\n      plural: 'Cubic kilometers per second',\n    },\n    to_anchor: 1000000000000,\n  },\n}\n\nimperial = {\n  'tsp/s': {\n    name: {\n      singular: 'Teaspoon per second',\n      plural: 'Teaspoons per second',\n    },\n    to_anchor: 1 / 6,\n  },\n  'Tbs/s': {\n    name: {\n      singular: 'Tablespoon per second',\n      plural: 'Tablespoons per second',\n    },\n    to_anchor: 1 / 2,\n  },\n  'in3/s': {\n    name: {\n      singular: 'Cubic inch per second',\n      plural: 'Cubic inches per second',\n    },\n    to_anchor: 0.55411,\n  },\n  'in3/min': {\n    name: {\n      singular: 'Cubic inch per minute',\n      plural: 'Cubic inches per minute',\n    },\n    to_anchor: 0.55411 / 60,\n  },\n  'in3/h': {\n    name: {\n      singular: 'Cubic inch per hour',\n      plural: 'Cubic inches per hour',\n    },\n    to_anchor: 0.55411 / 3600,\n  },\n  'fl-oz/s': {\n    name: {\n      singular: 'Fluid Ounce per second',\n      plural: 'Fluid Ounces per second',\n    },\n    to_anchor: 1,\n  },\n  'fl-oz/min': {\n    name: {\n      singular: 'Fluid Ounce per minute',\n      plural: 'Fluid Ounces per minute',\n    },\n    to_anchor: 1 / 60,\n  },\n  'fl-oz/h': {\n    name: {\n      singular: 'Fluid Ounce per hour',\n      plural: 'Fluid Ounces per hour',\n    },\n    to_anchor: 1 / 3600,\n  },\n  'cup/s': {\n    name: {\n      singular: 'Cup per second',\n      plural: 'Cups per second',\n    },\n    to_anchor: 8,\n  },\n  'pnt/s': {\n    name: {\n      singular: 'Pint per second',\n      plural: 'Pints per second',\n    },\n    to_anchor: 16,\n  },\n  'pnt/min': {\n    name: {\n      singular: 'Pint per minute',\n      plural: 'Pints per minute',\n    },\n    to_anchor: 4 / 15,\n  },\n  'pnt/h': {\n    name: {\n      singular: 'Pint per hour',\n      plural: 'Pints per hour',\n    },\n    to_anchor: 1 / 225,\n  },\n  'qt/s': {\n    name: {\n      singular: 'Quart per second',\n      plural: 'Quarts per second',\n    },\n    to_anchor: 32,\n  },\n  'gal/s': {\n    name: {\n      singular: 'Gallon per second',\n      plural: 'Gallons per second',\n    },\n    to_anchor: 128,\n  },\n  'gal/min': {\n    name: {\n      singular: 'Gallon per minute',\n      plural: 'Gallons per minute',\n    },\n    to_anchor: 32 / 15,\n  },\n  'gal/h': {\n    name: {\n      singular: 'Gallon per hour',\n      plural: 'Gallons per hour',\n    },\n    to_anchor: 8 / 225,\n  },\n  'ft3/s': {\n    name: {\n      singular: 'Cubic foot per second',\n      plural: 'Cubic feet per second',\n    },\n    to_anchor: 957.506,\n  },\n  'ft3/min': {\n    name: {\n      singular: 'Cubic foot per minute',\n      plural: 'Cubic feet per minute',\n    },\n    to_anchor: 957.506 / 60,\n  },\n  'ft3/h': {\n    name: {\n      singular: 'Cubic foot per hour',\n      plural: 'Cubic feet per hour',\n    },\n    to_anchor: 957.506 / 3600,\n  },\n  'yd3/s': {\n    name: {\n      singular: 'Cubic yard per second',\n      plural: 'Cubic yards per second',\n    },\n    to_anchor: 25852.7,\n  },\n  'yd3/min': {\n    name: {\n      singular: 'Cubic yard per minute',\n      plural: 'Cubic yards per minute',\n    },\n    to_anchor: 25852.7 / 60,\n  },\n  'yd3/h': {\n    name: {\n      singular: 'Cubic yard per hour',\n      plural: 'Cubic yards per hour',\n    },\n    to_anchor: 25852.7 / 3600,\n  },\n}\n\nmodule.exports = {\n  metric: metric,\n  imperial: imperial,\n  _anchors: {\n    metric: {\n      unit: 'l/s',\n      ratio: 33.8140227,\n    },\n    imperial: {\n      unit: 'fl-oz/s',\n      ratio: 1 / 33.8140227,\n    },\n  },\n}\n","var metric, imperial\n\nmetric = {\n  lx: {\n    name: {\n      singular: 'Lux',\n      plural: 'Lux',\n    },\n    to_anchor: 1,\n  },\n}\n\nimperial = {\n  'ft-cd': {\n    name: {\n      singular: 'Foot-candle',\n      plural: 'Foot-candles',\n    },\n    to_anchor: 1,\n  },\n}\n\nmodule.exports = {\n  metric: metric,\n  imperial: imperial,\n  _anchors: {\n    metric: {\n      unit: 'lx',\n      ratio: 1 / 10.76391,\n    },\n    imperial: {\n      unit: 'ft-cd',\n      ratio: 10.76391,\n    },\n  },\n}\n","var frequency\n\nfrequency = {\n  mHz: {\n    name: {\n      singular: 'millihertz',\n      plural: 'millihertz',\n    },\n    to_anchor: 1 / 1000,\n  },\n  Hz: {\n    name: {\n      singular: 'hertz',\n      plural: 'hertz',\n    },\n    to_anchor: 1,\n  },\n  kHz: {\n    name: {\n      singular: 'kilohertz',\n      plural: 'kilohertz',\n    },\n    to_anchor: 1000,\n  },\n  MHz: {\n    name: {\n      singular: 'megahertz',\n      plural: 'megahertz',\n    },\n    to_anchor: 1000 * 1000,\n  },\n  GHz: {\n    name: {\n      singular: 'gigahertz',\n      plural: 'gigahertz',\n    },\n    to_anchor: 1000 * 1000 * 1000,\n  },\n  THz: {\n    name: {\n      singular: 'terahertz',\n      plural: 'terahertz',\n    },\n    to_anchor: 1000 * 1000 * 1000 * 1000,\n  },\n  rpm: {\n    name: {\n      singular: 'rotation per minute',\n      plural: 'rotations per minute',\n    },\n    to_anchor: 1 / 60,\n  },\n  'deg/s': {\n    name: {\n      singular: 'degree per second',\n      plural: 'degrees per second',\n    },\n    to_anchor: 1 / 360,\n  },\n  'rad/s': {\n    name: {\n      singular: 'radian per second',\n      plural: 'radians per second',\n    },\n    to_anchor: 1 / (Math.PI * 2),\n  },\n}\n\nmodule.exports = {\n  metric: frequency,\n  _anchors: {\n    frequency: {\n      unit: 'hz',\n      ratio: 1,\n    },\n  },\n}\n","var angle\n\nangle = {\n  rad: {\n    name: {\n      singular: 'radian',\n      plural: 'radians',\n    },\n    to_anchor: 180 / Math.PI,\n  },\n  deg: {\n    name: {\n      singular: 'degree',\n      plural: 'degrees',\n    },\n    to_anchor: 1,\n  },\n  grad: {\n    name: {\n      singular: 'gradian',\n      plural: 'gradians',\n    },\n    to_anchor: 9 / 10,\n  },\n  arcmin: {\n    name: {\n      singular: 'arcminute',\n      plural: 'arcminutes',\n    },\n    to_anchor: 1 / 60,\n  },\n  arcsec: {\n    name: {\n      singular: 'arcsecond',\n      plural: 'arcseconds',\n    },\n    to_anchor: 1 / 3600,\n  },\n}\n\nmodule.exports = {\n  metric: angle,\n  _anchors: {\n    metric: {\n      unit: 'deg',\n      ratio: 1,\n    },\n  },\n}\n","var charge\n\ncharge = {\n  c: {\n    name: {\n      singular: 'Coulomb',\n      plural: 'Coulombs',\n    },\n    to_anchor: 1,\n  },\n  mC: {\n    name: {\n      singular: 'Millicoulomb',\n      plural: 'Millicoulombs',\n    },\n    to_anchor: 1 / 1000,\n  },\n  μC: {\n    name: {\n      singular: 'Microcoulomb',\n      plural: 'Microcoulombs',\n    },\n    to_anchor: 1 / 1000000,\n  },\n  nC: {\n    name: {\n      singular: 'Nanocoulomb',\n      plural: 'Nanocoulombs',\n    },\n    to_anchor: 1e-9,\n  },\n  pC: {\n    name: {\n      singular: 'Picocoulomb',\n      plural: 'Picocoulombs',\n    },\n    to_anchor: 1e-12,\n  },\n}\n\nmodule.exports = {\n  metric: charge,\n  _anchors: {\n    metric: {\n      unit: 'c',\n      ratio: 1,\n    },\n  },\n}\n","var force\n\nforce = {\n  N: {\n    name: {\n      singular: 'Newton',\n      plural: 'Newtons',\n    },\n    to_anchor: 1,\n  },\n  kN: {\n    name: {\n      singular: 'Kilonewton',\n      plural: 'Kilonewtons',\n    },\n    to_anchor: 1000,\n  },\n  lbf: {\n    name: {\n      singular: 'Pound-force',\n      plural: 'Pound-forces',\n    },\n    to_anchor: 4.44822,\n  },\n}\n\nmodule.exports = {\n  metric: force,\n  _anchors: {\n    metric: {\n      unit: 'N',\n      ratio: 1,\n    },\n  },\n}\n","var metric, imperial\n\nmetric = {\n  'kg/s': {\n    name: {\n      singular: 'Kilogram per second',\n      plural: 'Kilograms per second',\n    },\n    to_anchor: 1,\n  },\n  'kg/h': {\n    name: {\n      singular: 'Kilogram per hour',\n      plural: 'Kilograms per hour',\n    },\n    to_anchor: 1 / 3600,\n  },\n  'mt/h': {\n    name: {\n      singular: 'Ton per hour',\n      plural: 'Tons per hour',\n    },\n    to_anchor: 1 / 3.6,\n  },\n}\n\nimperial = {\n  'lb/s': {\n    name: {\n      singular: 'Pound per second',\n      plural: 'Pounds per second',\n    },\n    to_anchor: 1,\n  },\n  'lb/h': {\n    name: {\n      singular: 'Pound per hour',\n      plural: 'Pounds per hour',\n    },\n    to_anchor: 1 / 3600,\n  },\n}\n\nmodule.exports = {\n  metric: metric,\n  imperial: imperial,\n  _anchors: {\n    metric: {\n      unit: 'kg/s',\n\t\t\tratio: 1 / 0.453592,\n    },\n    imperial: {\n      unit: 'lb/s',\n\t\t\tratio: 0.453592,\n    },\n  },\n}\n","var pieces\n\npieces = {\n  pcs: {\n    name: {\n      singular: 'Piece',\n      plural: 'Pieces',\n    },\n    to_anchor: 1,\n  },\n  'bk-doz': {\n    name: {\n      singular: 'Bakers Dozen',\n      plural: 'Bakers Dozen',\n    },\n    to_anchor: 13,\n  },\n  cp: {\n    name: {\n      singular: 'Couple',\n      plural: 'Couples',\n    },\n    to_anchor: 2,\n  },\n  'doz-doz': {\n    name: {\n      singular: 'Dozen Dozen',\n      plural: 'Dozen Dozen',\n    },\n    to_anchor: 144,\n  },\n  doz: {\n    name: {\n      singular: 'Dozen',\n      plural: 'Dozens',\n    },\n    to_anchor: 12,\n  },\n  'gr-gr': {\n    name: {\n      singular: 'Great Gross',\n      plural: 'Great Gross',\n    },\n    to_anchor: 1728,\n  },\n  gros: {\n    name: {\n      singular: 'Gross',\n      plural: 'Gross',\n    },\n    to_anchor: 144,\n  },\n  'half-dozen': {\n    name: {\n      singular: 'Half Dozen',\n      plural: 'Half Dozen',\n    },\n    to_anchor: 6,\n  },\n  'long-hundred': {\n    name: {\n      singular: 'Long Hundred',\n      plural: 'Long Hundred',\n    },\n    to_anchor: 120,\n  },\n  ream: {\n    name: {\n      singular: 'Reams',\n      plural: 'Reams',\n    },\n    to_anchor: 500,\n  },\n  scores: {\n    name: {\n      singular: 'Scores',\n      plural: 'Scores',\n    },\n    to_anchor: 20,\n  },\n  'sm-gr': {\n    name: {\n      singular: 'Small Gross',\n      plural: 'Small Gross',\n    },\n    to_anchor: 120,\n  },\n  trio: {\n    name: {\n      singular: 'Trio',\n      plural: 'Trio',\n    },\n    to_anchor: 3,\n  },\n}\n\nmodule.exports = {\n  metric: pieces,\n  _anchors: {\n    metric: {\n      unit: 'pcs',\n      ratio: 1,\n    },\n  },\n}\n"]}